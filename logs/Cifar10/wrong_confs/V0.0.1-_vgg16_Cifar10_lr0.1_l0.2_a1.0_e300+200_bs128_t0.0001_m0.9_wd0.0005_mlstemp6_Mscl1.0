V0.0.1-_vgg16_Cifar10_lr0.1_l0.2_a1.0_e300+200_bs128_t0.0001_m0.9_wd0.0005_mlstemp6_Mscl1.0
Files already downloaded and verified
M values:
 {Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.6437135934829712, Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.3027346432209015, Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.1490456759929657, Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.13979694247245789, Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.20777323842048645, Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.10516299307346344, Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.10126874595880508, Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.09506335854530334, Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.05375269055366516, Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.050536274909973145, Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.04137488082051277, Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.027590204030275345, Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)): 0.03216041252017021, Linear(in_features=512, out_features=10, bias=True): 0.3597226142883301}
current lr 1.00000e-01
Traceback (most recent call last):
  File "/local1/caccmatt/Pruning_prj/grid_search.py", line 154, in <module>
    main()
  File "/local1/caccmatt/Pruning_prj/grid_search.py", line 151, in main
    grid_search.run()
  File "/local1/caccmatt/Pruning_prj/grid_search.py", line 133, in run
    trainer.train(epochs, finetuning_epochs)
  File "/local1/caccmatt/Pruning_prj/trainer.py", line 50, in train
    self.run_epoch(epoch)
  File "/local1/caccmatt/Pruning_prj/trainer.py", line 221, in run_epoch
    loss, regTerm = self.reg(self.model, loss, self.lamb)
  File "/local1/caccmatt/Pruning_prj/perspReg.py", line 12, in myReg
    const=(torch.sqrt(torch.Tensor([alpha/(1-alpha)]))).cuda()
ZeroDivisionError: float division by zero
